/**
 * Reverse Geocoding Utility
 * Converts coordinates to Japanese location names using Nominatim (OpenStreetMap) - FREE
 */

export interface ReverseGeocodeResult {
  locationName: string;
  success: boolean;
  error?: string;
}

/**
 * Reverse geocode coordinates to Japanese location name using Nominatim
 * @param lat - Latitude
 * @param lng - Longitude
 * @returns Promise<ReverseGeocodeResult>
 */
export async function reverseGeocodeToJapanese(
  lat: number,
  lng: number
): Promise<ReverseGeocodeResult> {
  try {
    console.log(`üìç [REVERSE_GEOCODE] Geocoding coordinates: ${lat}, ${lng}`);

    // Use Nominatim (OpenStreetMap) - FREE geocoding service
    const response = await fetch(
      `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&accept-language=ja&addressdetails=1`,
      {
        headers: {
          "User-Agent": "AutoReachPro/1.0", // Required by Nominatim
        },
      }
    );

    if (!response.ok) {
      throw new Error(
        `Nominatim API error: ${response.status} ${response.statusText}`
      );
    }

    const data = await response.json();

    if (data && data.display_name) {
      // Extract concise Japanese location name
      let locationName = extractJapaneseLocationNameFromNominatim(data);

      // Fallback to display_name if extraction fails
      if (!locationName) {
        locationName =
          data.display_name ||
          `„Éû„ÉÉ„ÉóÊ§úÁ¥¢ (${lat.toFixed(4)}, ${lng.toFixed(4)})`;
      }

      // Convert English names to Japanese if needed
      const japaneseLocationName = convertEnglishToJapanese(locationName || "");

      console.log(
        `‚úÖ [REVERSE_GEOCODE] Success: ${locationName} -> ${japaneseLocationName}`
      );

      return {
        locationName: japaneseLocationName,
        success: true,
      };
    } else {
      console.warn(`‚ö†Ô∏è [REVERSE_GEOCODE] No results found from Nominatim`);
      return {
        locationName: `„Éû„ÉÉ„ÉóÊ§úÁ¥¢ (${lat.toFixed(4)}, ${lng.toFixed(4)})`,
        success: false,
        error: "No results from Nominatim",
      };
    }
  } catch (error) {
    console.error(`‚ùå [REVERSE_GEOCODE] Error:`, error);
    return {
      locationName: `„Éû„ÉÉ„ÉóÊ§úÁ¥¢ (${lat.toFixed(4)}, ${lng.toFixed(4)})`,
      success: false,
      error: error instanceof Error ? error.message : "Unknown error",
    };
  }
}

/**
 * Extract concise Japanese location name from Nominatim response
 * @param data - Nominatim reverse geocoding response
 * @returns string | null
 */
function extractJapaneseLocationNameFromNominatim(data: {
  address?: Record<string, string>;
  display_name?: string;
}): string | null {
  if (!data || !data.address) {
    return null;
  }

  const address = data.address;
  const locationParts: string[] = [];

  // Priority order for Japanese location components - prioritize Japanese names
  const componentPriority = [
    "city", // Â∏Ç
    "town", // Áî∫
    "village", // Êùë
    "suburb", // Âå∫
    "county", // ÈÉ°
    "state", // ÈÉΩÈÅìÂ∫úÁúå
    "prefecture", // ÈÉΩÈÅìÂ∫úÁúå (alternative)
  ];

  // Extract components in priority order
  for (const component of componentPriority) {
    if (address[component]) {
      locationParts.push(address[component]);
    }
  }

  // Return the most specific location (first 2 parts)
  if (locationParts.length >= 2) {
    return `${locationParts[0]}, ${locationParts[1]}`;
  } else if (locationParts.length === 1) {
    return locationParts[0];
  }

  // Fallback: try to extract from display_name
  if (data.display_name) {
    const parts = data.display_name.split(",");
    if (parts.length >= 2) {
      // Take first two parts and clean them
      const firstPart = parts[0].trim();
      const secondPart = parts[1].trim();

      // Filter out common non-location terms
      const filteredParts = [firstPart, secondPart].filter(
        (part) =>
          !part.includes("Êó•Êú¨") &&
          !part.includes("Japan") &&
          !part.includes("„Äí") &&
          part.length > 0
      );

      if (filteredParts.length >= 2) {
        return `${filteredParts[0]}, ${filteredParts[1]}`;
      } else if (filteredParts.length === 1) {
        return filteredParts[0];
      }
    }
  }

  return null;
}

/**
 * Convert English location names to Japanese equivalents
 * @param locationName - English location name
 * @returns Japanese location name
 */
function convertEnglishToJapanese(locationName: string): string {
  // Common English to Japanese mappings for Tokyo areas
  const englishToJapanese: Record<string, string> = {
    // Tokyo wards
    "Suginami-ku": "Êùâ‰∏¶Âå∫",
    "Shibuya-ku": "Ê∏ãË∞∑Âå∫",
    "Shinjuku-ku": "Êñ∞ÂÆøÂå∫",
    "Chiyoda-ku": "ÂçÉ‰ª£Áî∞Âå∫",
    "Chuo-ku": "‰∏≠Â§ÆÂå∫",
    "Minato-ku": "Ê∏ØÂå∫",
    "Toshima-ku": "Ë±äÂ≥∂Âå∫",
    "Kita-ku": "ÂåóÂå∫",
    "Arakawa-ku": "ËçíÂ∑ùÂå∫",
    "Itabashi-ku": "ÊùøÊ©ãÂå∫",
    "Nerima-ku": "Á∑¥È¶¨Âå∫",
    "Adachi-ku": "Ë∂≥Á´ãÂå∫",
    "Katsushika-ku": "ËëõÈ£æÂå∫",
    "Edogawa-ku": "Ê±üÊà∏Â∑ùÂå∫",
    "Sumida-ku": "Â¢®Áî∞Âå∫",
    "Koto-ku": "Ê±üÊù±Âå∫",
    "Taito-ku": "Âè∞Êù±Âå∫",
    "Bunkyo-ku": "Êñá‰∫¨Âå∫",
    "Meguro-ku": "ÁõÆÈªíÂå∫",
    "Ota-ku": "Â§ßÁî∞Âå∫",
    "Setagaya-ku": "‰∏ñÁî∞Ë∞∑Âå∫",
    "Nakano-ku": "‰∏≠ÈáéÂå∫",
    Shibuya: "Ê∏ãË∞∑Âå∫",
    Shinjuku: "Êñ∞ÂÆøÂå∫",
    Chiyoda: "ÂçÉ‰ª£Áî∞Âå∫",
    Chuo: "‰∏≠Â§ÆÂå∫",
    Minato: "Ê∏ØÂå∫",
    Toshima: "Ë±äÂ≥∂Âå∫",
    Kita: "ÂåóÂå∫",
    Arakawa: "ËçíÂ∑ùÂå∫",
    Itabashi: "ÊùøÊ©ãÂå∫",
    Nerima: "Á∑¥È¶¨Âå∫",
    Adachi: "Ë∂≥Á´ãÂå∫",
    Katsushika: "ËëõÈ£æÂå∫",
    Edogawa: "Ê±üÊà∏Â∑ùÂå∫",
    Sumida: "Â¢®Áî∞Âå∫",
    Koto: "Ê±üÊù±Âå∫",
    Taito: "Âè∞Êù±Âå∫",
    Bunkyo: "Êñá‰∫¨Âå∫",
    Meguro: "ÁõÆÈªíÂå∫",
    Ota: "Â§ßÁî∞Âå∫",
    Setagaya: "‰∏ñÁî∞Ë∞∑Âå∫",
    Nakano: "‰∏≠ÈáéÂå∫",
    Suginami: "Êùâ‰∏¶Âå∫",

    // Prefectures
    Tokyo: "Êù±‰∫¨ÈÉΩ",
    "Tokyo Prefecture": "Êù±‰∫¨ÈÉΩ",
    "Tokyo Metropolis": "Êù±‰∫¨ÈÉΩ",
    Osaka: "Â§ßÈò™Â∫ú",
    "Osaka Prefecture": "Â§ßÈò™Â∫ú",
    Kyoto: "‰∫¨ÈÉΩÂ∫ú",
    "Kyoto Prefecture": "‰∫¨ÈÉΩÂ∫ú",
    Hyogo: "ÂÖµÂ∫´Áúå",
    "Hyogo Prefecture": "ÂÖµÂ∫´Áúå",
    Kanagawa: "Á•ûÂ•àÂ∑ùÁúå",
    "Kanagawa Prefecture": "Á•ûÂ•àÂ∑ùÁúå",
    Saitama: "ÂüºÁéâÁúå",
    "Saitama Prefecture": "ÂüºÁéâÁúå",
    Chiba: "ÂçÉËëâÁúå",
    "Chiba Prefecture": "ÂçÉËëâÁúå",
    Aichi: "ÊÑõÁü•Áúå",
    "Aichi Prefecture": "ÊÑõÁü•Áúå",
    Fukuoka: "Á¶èÂ≤°Áúå",
    "Fukuoka Prefecture": "Á¶èÂ≤°Áúå",
    Hokkaido: "ÂåóÊµ∑ÈÅì",
    "Hokkaido Prefecture": "ÂåóÊµ∑ÈÅì",
  };

  // Check for exact match first
  if (englishToJapanese[locationName]) {
    return englishToJapanese[locationName];
  }

  // Check for partial matches (e.g., "Suginami-ku, Tokyo" -> "Êùâ‰∏¶Âå∫, Êù±‰∫¨ÈÉΩ")
  const parts = locationName.split(",").map((part) => part.trim());
  const convertedParts = parts.map((part) => {
    // Try exact match first
    if (englishToJapanese[part]) {
      return englishToJapanese[part];
    }

    // Try with common suffixes
    const suffixes = ["-ku", "-shi", "-cho", "-machi", "-gun"];
    for (const suffix of suffixes) {
      const withoutSuffix = part.replace(suffix, "");
      if (englishToJapanese[withoutSuffix]) {
        return englishToJapanese[withoutSuffix];
      }
    }

    return part; // Return original if no conversion found
  });

  return convertedParts.join(", ");
}
