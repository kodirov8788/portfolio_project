// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("DIRECT_URL")
}

// =============================================================================
// USER MANAGEMENT MODELS
// =============================================================================

model UserRole {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique
  description String?
  permissions Json     @default("{}")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  users User[]

  @@map("user_roles")
}

model User {
  id            String    @id @db.Uuid
  username      String?   @unique
  email         String    @unique
  password      String? // Added for local authentication
  fullName      String?   @map("full_name")
  firstName     String?   @map("first_name")
  lastName      String?   @map("last_name")
  bio           String?
  avatarUrl     String?   @map("avatar_url")
  phone         String?
  website       String?
  location      String?
  githubUrl     String?   @map("github_url")
  linkedinUrl   String?   @map("linkedin_url")
  twitterUrl    String?   @map("twitter_url")
  instagramUrl  String?   @map("instagram_url")
  roleId        String?   @map("role_id") @db.Uuid
  isActive      Boolean   @default(true) @map("is_active")
  emailVerified Boolean   @default(false) @map("email_verified")
  lastLoginAt   DateTime? @map("last_login_at") @db.Timestamptz(6)
  loginCount    Int       @default(0) @map("login_count")
  preferences   Json      @default("{}")
  metadata      Json      @default("{}")
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  role                  UserRole?             @relation(fields: [roleId], references: [id])
  userSessions          UserSession[]
  blogPosts             BlogPost[]
  blogComments          BlogComment[]
  projects              Project[]
  projectCollaborations ProjectCollaborator[]
  contactMessages       ContactMessage[]
  testimonials          Testimonial[]
  mediaFiles            MediaFile[]
  analyticsEvents       AnalyticsEvent[]

  // NextAuth required fields
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model UserSession {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @map("user_id") @db.Uuid
  sessionToken String   @unique @map("session_token")
  ipAddress    String?  @map("ip_address") @db.Inet
  userAgent    String?  @map("user_agent")
  isActive     Boolean  @default(true) @map("is_active")
  expiresAt    DateTime @map("expires_at") @db.Timestamptz(6)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// =============================================================================
// BLOG SYSTEM MODELS
// =============================================================================

model BlogCategory {
  id             String   @id @default(uuid()) @db.Uuid
  name           String   @unique
  slug           String   @unique
  description    String?
  color          String   @default("#3b82f6")
  icon           String?
  parentId       String?  @map("parent_id") @db.Uuid
  sortOrder      Int      @default(0) @map("sort_order")
  isActive       Boolean  @default(true) @map("is_active")
  seoTitle       String?  @map("seo_title")
  seoDescription String?  @map("seo_description")
  createdBy      String?  @map("created_by") @db.Uuid
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  parent    BlogCategory?  @relation("BlogCategoryHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children  BlogCategory[] @relation("BlogCategoryHierarchy")
  blogPosts BlogPost[]

  @@map("blog_categories")
}

model BlogTag {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique
  slug        String   @unique
  description String?
  color       String   @default("#6b7280")
  usageCount  Int      @default(0) @map("usage_count")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  blogPosts BlogPostTag[]

  @@map("blog_tags")
}

model BlogPost {
  id               String         @id @default(uuid()) @db.Uuid
  title            String
  slug             String         @unique
  excerpt          String?
  content          String
  featuredImage    String?        @map("featured_image")
  featuredImageAlt String?        @map("featured_image_alt")
  categoryId       String?        @map("category_id") @db.Uuid
  authorId         String         @map("author_id") @db.Uuid
  status           BlogPostStatus @default(DRAFT)
  featured         Boolean        @default(false)
  readingTime      Int?           @map("reading_time")
  views            Int            @default(0)
  likes            Int            @default(0)
  shares           Int            @default(0)
  allowComments    Boolean        @default(true) @map("allow_comments")
  seoTitle         String?        @map("seo_title")
  seoDescription   String?        @map("seo_description")
  seoKeywords      String[]       @map("seo_keywords")
  publishedAt      DateTime?      @map("published_at") @db.Timestamptz(6)
  scheduledAt      DateTime?      @map("scheduled_at") @db.Timestamptz(6)
  createdAt        DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime       @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  category BlogCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  author   User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tags     BlogPostTag[]
  images   BlogImage[]
  comments BlogComment[]

  @@map("blog_posts")
}

model BlogPostTag {
  blogPostId String @map("blog_post_id") @db.Uuid
  tagId      String @map("tag_id") @db.Uuid

  // Relations
  blogPost BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  tag      BlogTag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([blogPostId, tagId])
  @@map("blog_post_tags")
}

model BlogImage {
  id         String   @id @default(uuid()) @db.Uuid
  blogPostId String   @map("blog_post_id") @db.Uuid
  imageUrl   String   @map("image_url")
  altText    String?  @map("alt_text")
  caption    String?
  width      Int?
  height     Int?
  fileSize   Int?     @map("file_size")
  sortOrder  Int      @default(0) @map("sort_order")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  blogPost BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)

  @@map("blog_images")
}

model BlogComment {
  id          String            @id @default(uuid()) @db.Uuid
  blogPostId  String            @map("blog_post_id") @db.Uuid
  parentId    String?           @map("parent_id") @db.Uuid
  authorId    String?           @map("author_id") @db.Uuid
  authorName  String?           @map("author_name")
  authorEmail String?           @map("author_email")
  content     String
  status      BlogCommentStatus @default(PENDING)
  ipAddress   String?           @map("ip_address") @db.Inet
  userAgent   String?           @map("user_agent")
  likes       Int               @default(0)
  createdAt   DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime          @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  blogPost BlogPost      @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  parent   BlogComment?  @relation("BlogCommentHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children BlogComment[] @relation("BlogCommentHierarchy")
  author   User?         @relation(fields: [authorId], references: [id], onDelete: SetNull)

  @@map("blog_comments")
}

// =============================================================================
// PROJECTS SYSTEM MODELS
// =============================================================================

model Skill {
  id              String        @id @default(uuid()) @db.Uuid
  name            String        @unique
  category        SkillCategory
  icon            String?
  color           String        @default("#3b82f6")
  proficiency     Int           @default(3) // 1-5 scale
  yearsExperience Decimal?      @map("years_experience") @db.Decimal(3, 1)
  description     String?
  isFeatured      Boolean       @default(false) @map("is_featured")
  sortOrder       Int           @default(0) @map("sort_order")
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  projects ProjectSkill[]

  @@map("skills")
}

model ProjectCategory {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique
  slug        String   @unique
  description String?
  color       String   @default("#3b82f6")
  icon        String?
  sortOrder   Int      @default(0) @map("sort_order")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  projects Project[]

  @@map("project_categories")
}

model Project {
  id               String            @id @default(uuid()) @db.Uuid
  title            String
  slug             String            @unique
  shortDescription String?           @map("short_description")
  fullDescription  String?           @map("full_description")
  featuredImage    String?           @map("featured_image")
  featuredImageAlt String?           @map("featured_image_alt")
  categoryId       String?           @map("category_id") @db.Uuid
  githubUrl        String?           @map("github_url")
  liveUrl          String?           @map("live_url")
  demoUrl          String?           @map("demo_url")
  documentationUrl String?           @map("documentation_url")
  status           ProjectStatus     @default(COMPLETED)
  priority         ProjectPriority   @default(MEDIUM)
  featured         Boolean           @default(false)
  complexity       ProjectComplexity @default(INTERMEDIATE)
  startDate        DateTime?         @map("start_date") @db.Date
  endDate          DateTime?         @map("end_date") @db.Date
  durationMonths   Int?              @map("duration_months")
  teamSize         Int               @default(1) @map("team_size")
  clientName       String?           @map("client_name")
  budgetRange      String?           @map("budget_range")
  views            Int               @default(0)
  likes            Int               @default(0)
  sortOrder        Int               @default(0) @map("sort_order")
  seoTitle         String?           @map("seo_title")
  seoDescription   String?           @map("seo_description")
  createdBy        String?           @map("created_by") @db.Uuid
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime          @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  category      ProjectCategory?      @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  creator       User?                 @relation(fields: [createdBy], references: [id], onDelete: SetNull)
  images        ProjectImage[]
  skills        ProjectSkill[]
  collaborators ProjectCollaborator[]
  testimonials  Testimonial[]

  @@map("projects")
}

model ProjectImage {
  id         String   @id @default(uuid()) @db.Uuid
  projectId  String   @map("project_id") @db.Uuid
  imageUrl   String   @map("image_url")
  altText    String?  @map("alt_text")
  caption    String?
  width      Int?
  height     Int?
  fileSize   Int?     @map("file_size")
  isFeatured Boolean  @default(false) @map("is_featured")
  sortOrder  Int      @default(0) @map("sort_order")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_images")
}

model ProjectSkill {
  projectId       String @map("project_id") @db.Uuid
  skillId         String @map("skill_id") @db.Uuid
  proficiencyUsed Int    @default(3) @map("proficiency_used") // 1-5 scale

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  skill   Skill   @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([projectId, skillId])
  @@map("project_skills")
}

model ProjectCollaborator {
  id                     String           @id @default(uuid()) @db.Uuid
  projectId              String           @map("project_id") @db.Uuid
  userId                 String           @map("user_id") @db.Uuid
  role                   CollaboratorRole @default(CONTRIBUTOR)
  contributionPercentage Decimal?         @map("contribution_percentage") @db.Decimal(5, 2)
  joinedAt               DateTime         @default(now()) @map("joined_at") @db.Timestamptz(6)
  leftAt                 DateTime?        @map("left_at") @db.Timestamptz(6)

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_collaborators")
}

// =============================================================================
// CONTACT & COMMUNICATION MODELS
// =============================================================================

model ContactCategory {
  id                String          @id @default(uuid()) @db.Uuid
  name              String          @unique
  description       String?
  autoReplyTemplate String?         @map("auto_reply_template")
  priority          ContactPriority @default(MEDIUM)
  createdAt         DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  messages ContactMessage[]

  @@map("contact_categories")
}

model ContactMessage {
  id           String               @id @default(uuid()) @db.Uuid
  categoryId   String?              @map("category_id") @db.Uuid
  name         String
  email        String
  phone        String?
  company      String?
  subject      String?
  message      String
  status       ContactMessageStatus @default(UNREAD)
  priority     ContactPriority      @default(MEDIUM)
  source       ContactSource        @default(WEBSITE)
  ipAddress    String?              @map("ip_address") @db.Inet
  userAgent    String?              @map("user_agent")
  referrer     String?
  assignedTo   String?              @map("assigned_to") @db.Uuid
  repliedAt    DateTime?            @map("replied_at") @db.Timestamptz(6)
  resolvedAt   DateTime?            @map("resolved_at") @db.Timestamptz(6)
  followUpDate DateTime?            @map("follow_up_date") @db.Date
  attachments  Json                 @default("[]")
  notes        String?
  createdAt    DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime             @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  category ContactCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  assignee User?            @relation(fields: [assignedTo], references: [id], onDelete: SetNull)

  @@map("contact_messages")
}

// =============================================================================
// ADDITIONAL PORTFOLIO MODELS
// =============================================================================

model Testimonial {
  id           String                   @id @default(uuid()) @db.Uuid
  name         String
  position     String?
  company      String?
  companyUrl   String?                  @map("company_url")
  content      String
  avatarUrl    String?                  @map("avatar_url")
  rating       Int? // 1-5 scale
  featured     Boolean                  @default(false)
  linkedinUrl  String?                  @map("linkedin_url")
  twitterUrl   String?                  @map("twitter_url")
  approved     Boolean                  @default(false)
  projectId    String?                  @map("project_id") @db.Uuid
  relationship TestimonialRelationship?
  dateOfWork   DateTime?                @map("date_of_work") @db.Date
  approvedBy   String?                  @map("approved_by") @db.Uuid
  approvedAt   DateTime?                @map("approved_at") @db.Timestamptz(6)
  createdAt    DateTime                 @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime                 @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  project  Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  approver User?    @relation(fields: [approvedBy], references: [id], onDelete: SetNull)

  @@map("testimonials")
}

model NewsletterSubscriber {
  id                String           @id @default(uuid()) @db.Uuid
  email             String           @unique
  name              String?
  status            NewsletterStatus @default(PENDING)
  confirmationToken String?          @unique @map("confirmation_token")
  unsubscribeToken  String?          @unique @map("unsubscribe_token")
  source            NewsletterSource @default(WEBSITE)
  interests         String[]         @default([])
  ipAddress         String?          @map("ip_address") @db.Inet
  userAgent         String?          @map("user_agent")
  confirmedAt       DateTime?        @map("confirmed_at") @db.Timestamptz(6)
  subscribedAt      DateTime?        @map("subscribed_at") @db.Timestamptz(6)
  unsubscribedAt    DateTime?        @map("unsubscribed_at") @db.Timestamptz(6)
  lastEmailSentAt   DateTime?        @map("last_email_sent_at") @db.Timestamptz(6)
  emailCount        Int              @default(0) @map("email_count")
  bounceCount       Int              @default(0) @map("bounce_count")
  createdAt         DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime         @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("newsletter_subscribers")
}

model Service {
  id               String   @id @default(uuid()) @db.Uuid
  name             String
  slug             String   @unique
  description      String?
  shortDescription String?  @map("short_description")
  icon             String?
  priceFrom        Decimal? @map("price_from") @db.Decimal(10, 2)
  priceTo          Decimal? @map("price_to") @db.Decimal(10, 2)
  currency         String   @default("USD")
  durationDays     Int?     @map("duration_days")
  featured         Boolean  @default(false)
  isActive         Boolean  @default(true) @map("is_active")
  deliverables     String[] @default([])
  requirements     String[] @default([])
  sortOrder        Int      @default(0) @map("sort_order")
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("services")
}

model AnalyticsEvent {
  id         String   @id @default(uuid()) @db.Uuid
  eventType  String   @map("event_type")
  entityType String?  @map("entity_type")
  entityId   String?  @map("entity_id") @db.Uuid
  userId     String?  @map("user_id") @db.Uuid
  sessionId  String?  @map("session_id")
  ipAddress  String?  @map("ip_address") @db.Inet
  userAgent  String?  @map("user_agent")
  referrer   String?
  deviceType String?  @map("device_type")
  browser    String?
  os         String?
  country    String?
  city       String?
  metadata   Json     @default("{}")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("analytics_events")
}

model MediaFile {
  id               String   @id @default(uuid()) @db.Uuid
  filename         String
  originalFilename String   @map("original_filename")
  filePath         String   @map("file_path")
  fileUrl          String   @map("file_url")
  fileType         String   @map("file_type")
  mimeType         String   @map("mime_type")
  fileSize         Int      @map("file_size")
  width            Int?
  height           Int?
  altText          String?  @map("alt_text")
  caption          String?
  uploadedBy       String?  @map("uploaded_by") @db.Uuid
  folder           String   @default("uploads")
  isPublic         Boolean  @default(true) @map("is_public")
  metadata         Json     @default("{}")
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  uploader User? @relation(fields: [uploadedBy], references: [id], onDelete: SetNull)

  @@map("media_files")
}

// =============================================================================
// ENUMS
// =============================================================================

enum BlogPostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  ARCHIVED
}

enum BlogCommentStatus {
  PENDING
  APPROVED
  REJECTED
  SPAM
}

enum SkillCategory {
  FRONTEND
  BACKEND
  DATABASE
  DEVOPS
  DESIGN
  MOBILE
  AI_ML
  OTHER
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  ARCHIVED
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ProjectComplexity {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum CollaboratorRole {
  OWNER
  DEVELOPER
  DESIGNER
  MANAGER
  CONTRIBUTOR
}

enum ContactPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ContactMessageStatus {
  UNREAD
  READ
  REPLIED
  IN_PROGRESS
  RESOLVED
  ARCHIVED
}

enum ContactSource {
  WEBSITE
  EMAIL
  LINKEDIN
  OTHER
}

enum TestimonialRelationship {
  CLIENT
  COLLEAGUE
  MANAGER
  SUBORDINATE
  OTHER
}

enum NewsletterStatus {
  PENDING
  SUBSCRIBED
  UNSUBSCRIBED
  BOUNCED
}

enum NewsletterSource {
  WEBSITE
  BLOG
  SOCIAL
  REFERRAL
  MANUAL
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @map("refresh_token") @db.Text
  access_token      String? @map("access_token") @db.Text
  expires_at        Int?
  token_type        String? @map("token_type")
  scope             String?
  id_token          String? @map("id_token") @db.Text
  session_state     String? @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
