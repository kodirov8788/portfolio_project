---
description: File organization rules for maintaining clean portfolio project structure
globs: ["**/*"]
alwaysApply: false
---

# Portfolio Project File Organization Rules

## Overview

This guide defines the standardized file organization structure for this Vite + React + TypeScript portfolio project to maintain clean, organized, and maintainable codebase.

## 📁 Directory Structure Rules

### 1. Components Organization

**Location**: `/components/` directory
**Purpose**: Reusable React components

#### Allowed Files:

- `*.tsx` - React TypeScript components
- `*.ts` - TypeScript utility files for components

#### Examples:

```
components/
├── Card.tsx
├── Header.tsx
├── ProjectCard.tsx
├── Sidebar.tsx
└── SkillBadge.tsx
```

### 2. Views Organization

**Location**: `/views/` directory
**Purpose**: Main page components and views

#### Allowed Files:

- `*.tsx` - React TypeScript view components

#### Examples:

```
views/
├── About.tsx
├── Contact.tsx
├── Dashboard.tsx
└── Projects.tsx
```

### 3. Configuration Files

**Location**: `/` (root) directory
**Purpose**: Project configuration and metadata

#### Allowed Files:

- `package.json`, `package-lock.json`
- `vite.config.ts`, `tsconfig.json`
- `index.html`, `index.tsx`
- `App.tsx` - Main application component
- `constants.tsx` - Application constants and data
- `types.ts` - TypeScript type definitions
- `metadata.json` - Project metadata

#### Examples:

```
/
├── package.json
├── vite.config.ts
├── tsconfig.json
├── index.html
├── index.tsx
├── App.tsx
├── constants.tsx
├── types.ts
└── metadata.json
```

### 4. AI Rules Organization

**Location**: `/ai/rules/` directory
**Purpose**: AI assistant rules and operational doctrine files (MDC format)

#### Allowed Files:

- `*.mdc` - Cursor MDC rule files with frontmatter

#### Examples:

```
ai/rules/
├── core-doctrine.mdc
├── communication.mdc
└── file-organization.mdc
```

### 5. AI Documentation

**Location**: `/ai/docs/` directory
**Purpose**: AI-specific documentation and work logs

#### Allowed Files:

- `*.mdc` - MDC documentation files
- `*.md` - Markdown documentation files

#### Examples:

```
ai/docs/
└── ai-worklog.mdc
```

### 6. AI Commands

**Location**: `/ai/commands/` directory
**Purpose**: Workflow protocols and command templates

#### Allowed Files:

- `*.md` - Markdown command files

#### Examples:

```
ai/commands/
├── debugging.md
├── perfect.md
├── refresh.md
├── request.md
└── retro.md
```

## 🚫 Prohibited Locations

### Root Directory Restrictions

**DO NOT** place the following in root directory:

- Test scripts (move to `/scripts/` if needed)
- Documentation files (move to `/docs/` if needed)
- Temporary test files
- Development notes
- AI rules (move to `/ai/rules/`)

### Exceptions

**Allowed in root directory:**

- `package.json`, `package-lock.json`
- `vite.config.ts`, `tsconfig.json`
- `index.html`, `index.tsx`, `App.tsx`
- `constants.tsx`, `types.ts`, `metadata.json`
- Environment files (`.env*`)
- `README.md` (main project README)

## 📋 File Naming Conventions

### Components

- Use PascalCase: `ProjectCard.tsx`, `SkillBadge.tsx`
- Use descriptive names: `Header.tsx`, `Sidebar.tsx`
- Keep names concise but clear

### Views

- Use PascalCase: `Dashboard.tsx`, `Projects.tsx`
- Match navigation/route names
- Use descriptive names: `About.tsx`, `Contact.tsx`

### Configuration Files

- Use kebab-case: `vite.config.ts`, `tsconfig.json`
- Use descriptive names: `constants.tsx`, `types.ts`
- Keep metadata files simple: `metadata.json`

### AI Rule Files

- Use kebab-case: `core-doctrine.mdc`, `file-organization.mdc`
- Include frontmatter metadata
- Use descriptive names: `communication.mdc`

## 🔄 Migration Rules

### When Adding New Files

1. **Components**: Always create in `/components/` directory
2. **Views**: Always create in `/views/` directory
3. **Configuration**: Place in root directory
4. **AI Rules**: Always create in `/ai/rules/` directory (MDC format)
5. **AI Docs**: Always create in `/ai/docs/` directory
6. **AI Commands**: Always create in `/ai/commands/` directory
7. **Update imports**: Update any references to moved files

### When Moving Existing Files

1. **Update references**: Search and update all file references
2. **Update documentation**: Update any documentation that references old paths
3. **Test changes**: Verify all functionality still works after moves

## 🛠️ Implementation Guidelines

### For Developers

1. **Before creating files**: Check this guide for proper location
2. **When in doubt**: Follow existing patterns in the project
3. **Consistency**: Follow the same patterns across all features
4. **Documentation**: Update this guide when adding new categories

### For AI Assistants

1. **Always check**: Verify file location before creating files
2. **Follow patterns**: Use existing naming conventions
3. **Update references**: When moving files, update all references
4. **Maintain structure**: Keep the organized structure intact

## 📊 Benefits

### Organization Benefits

- **Clear structure**: Easy to find files by purpose
- **Maintainability**: Easier to maintain and update
- **Scalability**: Structure scales with project growth
- **Team collaboration**: Clear expectations for all team members

### Development Benefits

- **Faster development**: Know exactly where to find files
- **Reduced conflicts**: Less chance of file conflicts
- **Better organization**: Clean separation of concerns
- **Cleaner root**: Root directory stays clean and focused

## 🔍 File Location Examples

### ✅ Correct Locations

```
# Components
components/Card.tsx
components/Header.tsx
components/ProjectCard.tsx

# Views
views/Dashboard.tsx
views/Projects.tsx
views/About.tsx

# Configuration
App.tsx
constants.tsx
types.ts
metadata.json

# AI Rules
ai/rules/core-doctrine.mdc
ai/rules/communication.mdc
ai/rules/file-organization.mdc

# AI Docs
ai/docs/ai-worklog.mdc

# AI Commands
ai/commands/request.md
ai/commands/refresh.md
ai/commands/retro.md
```

### ❌ Incorrect Locations

```
# DON'T put components in root
Card.tsx
Header.tsx
ProjectCard.tsx

# DON'T put views in root
Dashboard.tsx
Projects.tsx
About.tsx

# DON'T put AI rules in root
core-doctrine.mdc
communication.mdc
```

## 🚀 Quick Reference

| File Type     | Location        | Naming Convention                  |
| ------------- | --------------- | ---------------------------------- |
| Components    | `/components/`  | `PascalCase.tsx`                   |
| Views         | `/views/`       | `PascalCase.tsx`                   |
| Configuration | `/` (root)      | `kebab-case.ts` or `camelCase.tsx` |
| AI Rules      | `/ai/rules/`    | `kebab-case.mdc`                   |
| AI Docs       | `/ai/docs/`     | `kebab-case.mdc`                   |
| AI Commands   | `/ai/commands/` | `kebab-case.md`                    |
| Main README   | `/` (root)      | `README.md`                        |

## 📝 Maintenance

### Regular Tasks

1. **Monthly review**: Check for misplaced files
2. **Update guide**: Add new patterns as they emerge
3. **Clean up**: Remove unused files from wrong locations
4. **Documentation**: Keep this guide updated

### When Adding New Features

1. **Create directories**: If new categories are needed
2. **Update guide**: Add new patterns to this guide
3. **Inform team**: Share new organization patterns
4. **Test structure**: Verify new structure works

This organization system ensures a clean, maintainable, and scalable portfolio project structure that benefits all team members and AI assistants working on the project.
